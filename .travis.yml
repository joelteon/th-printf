# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs 'cabal.project' '-o' '.travis.yml'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-8.4.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.4.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.2.2], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - INSTALLED=${INSTALLED-true}
  - GHCHEAD=${GHCHEAD-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  # Overlay next-hackage for sig packages
  - |
    sed -i.bak 's/-- allow-newer:.*/allow-newer: *:base, *:template-haskell, *:ghc, *:Cabal/' ${HOME}/.cabal/config

    echo 'repository next-hackage'                                                        >> ${HOME}/.cabal/config
    echo '   url: http://next.hackage.haskell.org:8080/'                                  >> ${HOME}/.cabal/config
    echo '   secure: True'                                                                >> ${HOME}/.cabal/config
    echo '   root-keys: 015ccb40c3cd254a7de458b048ba672c47e59195b3c8969cd85b686de2d49e2b' >> ${HOME}/.cabal/config
    echo '              0553aa6ab1e93a7c37d1d91670721b3b1ea8e976289c9709ebaaa9773df4538e' >> ${HOME}/.cabal/config
    echo '              f9cfba99add8cb35e94d16c1819903373ad45e9702557f0b4ec2cf10f2738216' >> ${HOME}/.cabal/config
    echo '   key-threshold: 2'                                                            >> ${HOME}/.cabal.config

    cabal new-update next-hackage -v
  - rm -fv cabal.project cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'packages: \"th-printf-indef\" \"th-printf-text\" \"th-printf-str\"\\n' > cabal.project"
  - cat cabal.project
  - if [ -f "th-printf-indef/configure.ac" ]; then
      (cd "th-printf-indef" && autoreconf -i);
    fi
  - if [ -f "th-printf-text/configure.ac" ]; then
      (cd "th-printf-text" && autoreconf -i);
    fi
  - if [ -f "th-printf-str/configure.ac" ]; then
      (cd "th-printf-str" && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
  - rm -rf .ghc.environment.* "th-printf-indef"/dist "th-printf-text"/dist "th-printf-str"/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - (cd "th-printf-indef" && cabal sdist)
  - (cd "th-printf-text" && cabal sdist)
  - (cd "th-printf-str" && cabal sdist)
  - mv "th-printf-indef"/dist/th-printf-indef-*.tar.gz "th-printf-text"/dist/th-printf-text-*.tar.gz "th-printf-str"/dist/th-printf-str-*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  - "printf 'packages: th-printf-indef-*/*.cabal th-printf-text-*/*.cabal th-printf-str-*/*.cabal\\n' > cabal.project"
  - cat cabal.project
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # Build with installed constraints for packages in global-db
  - if $INSTALLED; then echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh; else echo "Not building with installed constraints"; fi

  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH} all

  # cabal check
  - (cd th-printf-indef-* && cabal check)
  - (cd th-printf-text-* && cabal check)
  - (cd th-printf-str-* && cabal check)

  # haddock
  - rm -rf ./dist-newstyle
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

# REGENDATA ["cabal.project","-o",".travis.yml"]
# EOF
